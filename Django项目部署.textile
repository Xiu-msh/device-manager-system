h1(#django项目部署). Django项目部署

简述：使用ngix&#43;wsgi&#43;ubuntu项目部署

h2(#ubuntu服务器建设). ubuntu服务器建设：

# 使用三方云服务器；要花钱
# 使用自己的一台笔记本，手动安装Linux操作系统使用(centos、ubuntu等)

h3(#服务器开启ssh连接). 服务器开启SSH连接

bc(bash). # 检查SSH当前服务状态
sudo systemctl status ssh
# 检查是否安装SSH服务
dpkg -l | grep openssh-server
# 下载安装ssh服务
sudo apt-get udpate
sudo apt-get install openssh-server
# 启动ssh服务
sudo systemctl start ssh
# 设置ssh服务开机自启动
sudo systemctl enable ssh
# 确保你的 Ubuntu 服务器的防火墙允许 SSH 连接（默认端口是 22）。 你可以使用以下命令允许 SSH 端口：
sudo ufw allow ssh
sudo ufw enable
# 默认端口查看 port=22
sudo cat /etc/ssh/ssh_config


h3(#使用三方工具ishell-pro等远程连接). 使用三方工具ishell pro等远程连接

<pre class="bash">
在 iSH Pro 上设置和连接
打开 iSH Pro 应用。

创建新的 SSH 会话。 在 iSH Pro 中，通常你会看到一个“+”按钮用于添加新的会话。点击它，然后选择“New Session”。

配置 SSH 会话。 在新建会话的配置中，你需要输入以下信息：

Session Name: 输入一个容易识别的名称，比如“Ubuntu Server”。

Hostname: 输入你的 Ubuntu 服务器的 IP 地址。

Username: 输入你用于登录 Ubuntu 服务器的用户名。

Password: 输入你的密码（如果你使用的是密码认证）。或者，你也可以选择使用 SSH 密钥进行认证，这时你需要将你的公钥添加到服务器的 ~/.ssh/authorized_keys 文件中。

保存并连接。 配置完成后，保存会话设置，然后点击连接图标开始连接。

首次连接可能需要接受服务器的公钥。 如果这是你第一次连接到该服务器，iSH Pro 会提示你接受服务器的公钥指纹。确认无误后接受它。

使用 SSH 密钥（更安全）
如果你倾向于使用 SSH 密钥进行认证，可以按照以下步骤操作：

在 iOS 设备上生成 SSH 密钥对（如果还没有的话）：

ssh-keygen -t rsa -b 2048

按照提示操作，保存密钥到默认位置或指定位置。

将公钥添加到你的 Ubuntu 服务器的 ~/.ssh/authorized_keys 文件中：

cat ~/.ssh/id_rsa.pub | ssh user@your_server_ip 'cat &gt;&gt; .ssh/authorized_keys'

替换 user 和 your_server_ip 为你的用户名和服务器 IP。

在 iSH Pro 中配置 SSH 会话时，选择使用密钥认证，并指向你的私钥文件。

通过以上步骤，你应该能够在 iSH Pro 上成功连接到你的 Ubuntu 服务器
</pre>

h2(#mysql数据库安装使用). Mysql数据库安装使用

h3(#数据库安装). 数据库安装

<pre class="bash">
# 下载安装mysql服务包
sudo apt-get update
sudo apt-get install mysql-server

# 启动mysql服务并设置开机启动
sudo systemctl start mysql
sudo systemctl enable mysql

# 找到mysql的登录密码（可以通过日志文件登录）默认为用户登录密码
sudo cat /var/log/mysql/error.log | grep 'temporary password'
</pre>

数据库权限配置

<pre class="mysql">
-- 设置新密码
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码'; 
-- 刷新权限
FLUSH PRIVILEGES;  

 -- 创建数据库(项目使用的db name)
CREATE DATABASE mydata CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 

-- 创建用户可以用从任何主机连接数据库
CREATE USER 'root'@'%' IDENTIFIED BY '123456'; 
-- 授权用户访问数据库
GRANT ALL PRIVILEGES ON mydata.* TO 'root'@'%';  
-- 刷新权限
FLUSH PRIVILEGES;  

# 如果远程连接不上可通过修改认证插件
# 修改 root@localhost 的认证插件为 mysql_native_password
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';

FLUSH PRIVILEGES;
</pre>

h2(#本地开发代码上传码云). 本地开发代码上传码云

1、首次需要git init本地代码文件夹

!E:\%E6%96%87%E6%A1%A3\%E5%9B%BE%E7%89%87\gitinit.png(fig:)!

2、添加.gitignore文件告诉git那些在add和push的时候忽略

以下仅仅是一个例子

<pre class="txt">
# 忽略虚拟环境
.venv/
venv/

# 忽略 SQLite 数据库文件
db.sqlite3

# 忽略构建目录
build/

# 忽略日志文件
*.log

# 忽略 Python 字节码
__pycache__/
*.pyc

# 忽略系统文件
.DS_Store
Thumbs.db

# 忽略 git 相关的临时文件
*.git/
</pre>

3、多人协同操作

详情见一下地址

"$":https://blog.csdn.net/yeye_queenmoon/article/details/144472289

h2(#远程服务器部署). 远程服务器部署

<ol style="list-style-type: decimal;">
<li><p>设置秘钥后续通过ssh拉取项目</p>
bc(). git clone https://github.com/yourusername/yourproject.git


<p></p></li>
<li><p>配置所需要的环境</p>
<ol style="list-style-type: decimal;">
<li><p>安装一一些依赖项，来确保项目构建</p>
bc(bash). # 更新链接库
sudo apt-get update
# 安装venev环境库
sudo apt-get install python3-venv python3-dev curl 
# sqlclient的依赖库
sudo apt-get install libmysqlclient-dev
# 安装其他库包括GCC等
sudo apt install -y build-essential libssl-dev zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libsqlite3-dev libreadline-dev libffi-dev libbz2-dev


<p></p></li>
<li><p>创建venv环境</p>
bc(bash). cd yourproject  # 进入项目根目录
python3 -m venv venv
source venv/bin/activate


<p></p></li>
<li><p>激活环境 安装新的pip 以及新的依赖(根据提示安装不同的依赖环境)</p>
bc(bash). pip isntall -r requirements

</li>
<li>h4(#使用-gunicorn--nginx生产环境）). 使用 Gunicorn &#43; Nginx（生产环境）

<p>安装gunicorn</p>
bc(bash). pip install gunicorn

</li>
</ol>
</li>
</ol>

 配置gunicorn

<pre class="ini">

# 创建gunicorn.service
sudo vim /etc/systemd/system/gunicorn.service
# 写入以下文件ini
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
; 主机用户名
User=shin  
Group=www-data
WorkingDirectory=/home/shin/device-manager-system	; 工作大目录
ExecStart=/home/shin/device-manager-system/venv/bin/gunicorn \  ; VENEV环境
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          device_manager.wsgi:application

[Install]
WantedBy=multi-user.target

# 创建gunicorn.socket套接字文件
sudo vim /etc/systemd/system/gunicorn.socket
# 写入以下文件ini
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target

;启动并启用 Gunicorn 服务和套接字：
sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket
</pre>

安装nginx

<pre class="">

# 创建 Nginx 配置文件：
sudo nano /etc/nginx/sites-available/yourproject

写入以下文件
server {
    listen 80;
    server_name 192.168.0.214;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/shin/device-manager-system/device_manager;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}

保存并退出文件。
创建软链接：
sudo ln -s /etc/nginx/sites-available/yourproject /etc/nginx/sites-enabled
测试 Nginx 配置：
sudo nginx -t

如果配置无误，重启 Nginx 服务：
sudo systemctl restart nginx
</pre>

在浏览器中访问 @http://<远程服务器 IP 地址>@ 即可查看项目
